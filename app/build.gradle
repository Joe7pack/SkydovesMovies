apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'
//apply plugin: 'com.google.gms.google-services'
//apply plugin: 'spotless'

apply from: '../jacoco.gradle'
apply from: '../spotless.gradle'

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.skydoves.themovies2"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.skydoves.themovies2.runner.AndroidJunitTestRunner"
        buildConfigField "String", "TMDB_API_KEY", "\"${getProperty("local.properties", "tmdb_api_key")}\""
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    kapt {
        correctErrorTypes = true
    }
    dataBinding {
        enabled = true
    }
    androidExtensions {
        experimental = true
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    /*
    buildFeatures {
        viewBinding = true
    }

    dataBinding {
        enabled = true
    }
    */

    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/NOTICE.md'
    }
}

configurations.all {
    resolutionStrategy { force 'androidx.core:core-ktx:1.6.0' }
}

dependencies {
    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    // support library
    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.palette:palette:$androidxVersion"
    // architecture components
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    // ViewModel utilities for Compose
    implementation("androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycleVersion")
    // Saved state module for ViewModel
    implementation("androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycleVersion")
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    // Lifecycles only (without ViewModel or LiveData)
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion")
    // optional - ReactiveStreams support for LiveData
    implementation("androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycleVersion")
    // optional - Test helpers for LiveData
    testImplementation("androidx.arch.core:core-testing:$archVersion")
    // Annotation processor
    kapt("androidx.lifecycle:lifecycle-compiler:$lifecycleVersion")
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    //implementation("androidx.lifecycle:lifecycle-common-java8:$lifecycle_version")
    // optional - helpers for implementing LifecycleOwner in a Service
    implementation("androidx.lifecycle:lifecycle-service:$lifecycleVersion")
    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation("androidx.lifecycle:lifecycle-process:$lifecycleVersion")

    implementation "androidx.room:room-runtime:$roomVersion"
    implementation fileTree(dir: 'C:\\Users\\Joe\\AndroidStudioProjects\\SkydovesTheMovies2\\libs\\glidepalette-2.1.2\\classes.jar\\', include: ['*.aar', '*.jar'], exclude: []).exclude  {
        details ->
    }
    kapt "androidx.room:room-compiler:$roomVersion"
    testImplementation "androidx.arch.core:core-testing:$archCompomentVersion"

    // Koin Core features
    implementation "io.insert-koin:koin-core:$koinVersion"
    // Koin Test features
    testImplementation "io.insert-koin:koin-test:$koinVersion"
    // Koin AndroidX Experimental features
    implementation "io.insert-koin:koin-android-ext:$koinOlderVersion"
    implementation "io.insert-koin:koin-android:$koinVersion"

    // whatIf
    implementation "com.github.skydoves:whatif:$whatIfVersion"

    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    // network
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    //implementation "com.google.code.gson:gson:$retrofitVersion"
    //implementation 'com.google.code.gson:gson:2.8.7'
    //implementation 'com.github.google.gson:gson:2.8.7'
    implementation "com.github.skydoves:sandwich:$sandwichVersion"
    implementation "com.github.skydoves:baserecyclerviewadapter:1.0.4"

    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"

    // glide
    //implementation "com.github.florent37:glidepalette:$glidePaletteVersion"
    //implementation "com.github.florent37:glidepalette:1.0.6"
    //implementation("com.github.florent37:glidepalette:2.1.2")
    // https://mvnrepository.com/artifact/com.github.florent37/glidepalette
    //implementation 'com.github.florent37:materialviewpager:1.2.3'
    //kapt "com.github.florent37:glidepalette:2.1.2"
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    //dependencies
    implementation 'com.flaviofaria:kenburnsview:1.0.7'
    implementation 'com.jpardogo.materialtabstrip:library:1.1.0'
    implementation 'com.github.bumptech.glide:glide:4.10.0'

    // debugging
    implementation "com.jakewharton.timber:timber:$timberVersion"
    implementation "com.facebook.stetho:stetho:$stethoVersion"
    implementation "com.facebook.stetho:stetho-okhttp3:$stethoVersion"

    // custom view
    implementation "com.ms-square:expandableTextView:$expandableTextViewVersion"

    //implementation "javax.xml.bind:jaxb-api:2.3.1"
    //implementation "jakarta.xml.bind:jakarta.xml.bind-api:2.3.3"
    implementation "org.glassfish.jaxb:jaxb-runtime:2.3.5"
    // unit test
    testImplementation "junit:junit:$junitVersion"
    testImplementation "androidx.test:core:$unitTestCoreVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxTest"
    androidTestImplementation "androidx.test:rules:$androidxTestRules"

    implementation("androidx.work:work-runtime-ktx:2.7.1") {
        //force = true
    }
}


